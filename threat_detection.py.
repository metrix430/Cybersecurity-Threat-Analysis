import numpy as np                       
import pandas as pd        
from scapy.all import sniff, IP  
from sklearn.ensemble import IsolationForest  
from sklearn.preprocessing import StandardScaler  
   
   #Train a basic threat detection mode1  
   def tran_mode1():
   data = {
    "packet_size": np.random.randint(50, 1500, 1000),
    "source_ip": np.random.randint(1, 255, 1000),
    "dest_ip": np.random.randint(1, 255, 1000),
    "latency": np.random.uniform(0.1, 1.5, 1000),
    "malicious": np.random.choice.([0.1], size=1000, p=[0.95, 0.05])
   }

   df = pd.DataFrame(data)

   # Separate features and labels 
   X = df.drop(columns=["malicious"])

   # Scale the data 
   scaler = StandardScaler()
   X_scaled = = scaler.fit_transform(X)

   # Train Isolation Forest model
   mode1 = IsolationForest(n_estimators=100, contamination=0.05, random_state=42)
   model.fit(X_scaled)

   return model, scaler

   # Initialize modee1
   mode1, scaler = train_mode1()

   # Function to analyze packet 
   def detect_threat(packet):
   if packet.haslayer(IP):
   packet_size = len(packet)
   source_ip = int(packet[IP].src.split(".")[-1]) # Simplified encoding
   dest_ip = int(packet[IP].dst.split(".")[-1])
   latency = np.random.uniform(0.1, 1.5)

   packet_data = pd.DataFrame([[packet_size, source_ip, dest_ip, latency]],
   columns=["packet_size", "source_ip", "dest_ip", "latency"])

   packet_scaled = scaler.transform(packet_data)

   prediction = model.predict(packet_scaled)
   threat_status = "THREAT DETECTED" if prediction[0] == -1 else "Normal"

   print(f"Packet: {packet_size} bytes | Source: {source_ip} | Dest: {dest_ip} | Status: {threat_status}")

   # Capture and analyze 50 packets 
   print(Monitoring network traffic for threats...")
   sniff(filter="ip", prn=detect_threat, store=False, count=50)